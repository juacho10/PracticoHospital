extends ../layout

block content
  .card.shadow
    .card-header.bg-primary.text-white
      h3.mb-0
        i.fas.fa-user-plus.me-2
        | Registrar Paciente para Admisión
    
    .card-body
      if errors && errors.general
        .alert.alert-danger
          i.fas.fa-exclamation-circle.me-2
          | #{errors.general}
      
      form(method="POST", action="/admission/register", id="admissionForm")
        .row.mb-4
          .col-md-6
            h5
              i.fas.fa-user-circle.me-2
              | Datos del Paciente
          .col-md-6.text-end
            button.btn.btn-sm.btn-outline-secondary(type="button", id="searchPatientBtn")
              i.fas.fa-search.me-1
              | Buscar paciente existente
        
        #patientSearchContainer.mb-4.d-none
          .card.card-body.mb-3
            .input-group
              input.form-control(type="text", placeholder="Ingrese DNI del paciente", id="patientSearchInput")
              button.btn.btn-primary(type="button", id="patientSearchBtn") Buscar
            #patientSearchResults.mt-3
        
        .row.g-3
          .col-md-6
            .form-floating
              input.form-control(
                type="text", 
                id="dni", 
                name="dni", 
                required,
                value=formData ? formData.dni : '',
                class=errors && errors.dni ? 'is-invalid' : ''
              )
              label(for="dni") DNI *
              if errors && errors.dni
                .invalid-feedback #{errors.dni}
          
          .col-md-6
            .form-floating
              input.form-control(
                type="text", 
                id="first_name", 
                name="first_name", 
                required,
                value=formData ? formData.first_name : '',
                class=errors && errors.first_name ? 'is-invalid' : ''
              )
              label(for="first_name") Nombre *
              if errors && errors.first_name
                .invalid-feedback #{errors.first_name}
          
          .col-md-6
            .form-floating
              input.form-control(
                type="text", 
                id="last_name", 
                name="last_name", 
                required,
                value=formData ? formData.last_name : '',
                class=errors && errors.last_name ? 'is-invalid' : ''
              )
              label(for="last_name") Apellido *
              if errors && errors.last_name
                .invalid-feedback #{errors.last_name}
          
          .col-md-3
            .form-floating
              input.form-control(
                type="date", 
                id="birth_date", 
                name="birth_date", 
                required,
                value=formData ? formData.birth_date : '',
                class=errors && errors.birth_date ? 'is-invalid' : ''
              )
              label(for="birth_date") Fecha Nacimiento *
              if errors && errors.birth_date
                .invalid-feedback #{errors.birth_date}
          
          .col-md-3
            .form-floating
              select.form-select(
                id="gender", 
                name="gender", 
                required,
                class=errors && errors.gender ? 'is-invalid' : ''
              )
                option(value="") Seleccione...
                option(value="M", selected=(formData && formData.gender === 'M')) Masculino
                option(value="F", selected=(formData && formData.gender === 'F')) Femenino
                option(value="O", selected=(formData && formData.gender === 'O')) Otro
              label(for="gender") Género *
              if errors && errors.gender
                .invalid-feedback #{errors.gender}
        
        hr.my-4
        
        h5.mb-3
          i.fas.fa-address-card.me-2
          | Información de Contacto
        
        .row.g-3
          .col-md-8
            .form-floating
              input.form-control(
                type="text", 
                id="address", 
                name="address", 
                value=formData ? formData.address : ''
              )
              label(for="address") Dirección
          
          .col-md-4
            .form-floating
              input.form-control(
                type="text", 
                id="phone", 
                name="phone", 
                value=formData ? formData.phone : ''
              )
              label(for="phone") Teléfono
          
          .col-md-6
            .form-floating
              input.form-control(
                type="email", 
                id="email", 
                name="email", 
                value=formData ? formData.email : ''
              )
              label(for="email") Email
          
          .col-md-6
            .form-floating
              select.form-select(id="insurance", name="insurance")
                option(value="") Seleccione seguro...
                option(value="OSDE", selected=(formData && formData.insurance === 'OSDE')) OSDE
                option(value="Swiss Medical", selected=(formData && formData.insurance === 'Swiss Medical')) Swiss Medical
                option(value="Galeno", selected=(formData && formData.insurance === 'Galeno')) Galeno
                option(value="Medifé", selected=(formData && formData.insurance === 'Medifé')) Medifé
                option(value="DOSEP", selected=(formData && formData.insurance === 'DOSEP')) DOSEP
                option(value="Particular", selected=(formData && formData.insurance === 'Particular')) Particular
                option(value="Otro", selected=(formData && formData.insurance === 'Otro')) Otro
              label(for="insurance") Seguro Médico
        
        hr.my-4
        
        h5.mb-3
          i.fas.fa-procedures.me-2
          | Datos de Admisión
        
        .row.g-3
          .col-md-4
            .form-floating
              select.form-select(
                id="admission_type", 
                name="admission_type", 
                required,
                class=errors && errors.admission_type ? 'is-invalid' : ''
              )
                option(value="") Seleccione tipo...
                each type in admissionTypes
                  option(
                    value=type, 
                    selected=(formData && formData.admission_type === type)
                  )= type.charAt(0).toUpperCase() + type.slice(1)
              label(for="admission_type") Tipo de Admisión *
              if errors && errors.admission_type
                .invalid-feedback #{errors.admission_type}
          
          .col-md-8
            .form-floating
              input.form-control(
                type="text", 
                id="referring_doctor", 
                name="referring_doctor", 
                value=formData ? formData.referring_doctor : ''
              )
              label(for="referring_doctor") Médico Referente
        
          .col-12
            .form-floating
              textarea.form-control(
                id="reason", 
                name="reason", 
                style="height: 100px", 
                required,
                class=errors && errors.reason ? 'is-invalid' : ''
              )= formData ? formData.reason : ''
              label(for="reason") Motivo de Admisión *
              if errors && errors.reason
                .invalid-feedback #{errors.reason}
        
        .d-grid.gap-2.d-md-flex.justify-content-md-end.mt-4
          a.btn.btn-secondary.me-md-2(href="/admission/list")
            i.fas.fa-arrow-left.me-1
            | Cancelar
          button.btn.btn-primary(type="submit")
            i.fas.fa-save.me-1
            | Registrar Paciente

block scripts
  script.
    document.addEventListener('DOMContentLoaded', function() {
      // Elementos del DOM
      const searchPatientBtn = document.getElementById('searchPatientBtn');
      const patientSearchContainer = document.getElementById('patientSearchContainer');
      const patientSearchBtn = document.getElementById('patientSearchBtn');
      const patientSearchInput = document.getElementById('patientSearchInput');
      const patientSearchResults = document.getElementById('patientSearchResults');
      const admissionForm = document.getElementById('admissionForm');

      // Función para mostrar mensajes
      function showMessage(message, type = 'info') {
        const alertTypes = {
          'success': { class: 'alert-success', icon: 'check-circle' },
          'danger': { class: 'alert-danger', icon: 'times-circle' },
          'warning': { class: 'alert-warning', icon: 'exclamation-triangle' },
          'info': { class: 'alert-info', icon: 'info-circle' }
        };
        
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert ${alertTypes[type].class} alert-dismissible fade show`;
        alertDiv.innerHTML = `
          <i class="fas fa-${alertTypes[type].icon} me-2"></i>
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        patientSearchResults.innerHTML = '';
        patientSearchResults.appendChild(alertDiv);
        
        setTimeout(() => {
          alertDiv.classList.remove('show');
          setTimeout(() => alertDiv.remove(), 150);
        }, 5000);
      }

      // Función para autocompletar formulario
      function autocompleteForm(patient) {
        const fields = {
          'dni': patient.dni || '',
          'first_name': patient.first_name || '',
          'last_name': patient.last_name || '',
          'birth_date': patient.birth_date ? patient.birth_date.split('T')[0] : '',
          'gender': patient.gender || 'M',
          'address': patient.address || '',
          'phone': patient.phone || '',
          'email': patient.email || '',
          'insurance': patient.insurance || ''
        };

        for (const [id, value] of Object.entries(fields)) {
          const field = document.getElementById(id);
          if (field) {
            field.value = value;
            field.dispatchEvent(new Event('change'));
          }
        }
      }

      // Búsqueda de paciente
      patientSearchBtn.addEventListener('click', async function() {
        const dni = patientSearchInput.value.trim();
        
        if (!dni) {
          showMessage('Por favor ingrese un DNI para buscar', 'warning');
          return;
        }

        try {
          showMessage('<div class="spinner-border spinner-border-sm me-2"></div> Buscando paciente...', 'info');
          
          const response = await fetch(`/patient/api/search?dni=${dni}`);
          
          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || 'Error en la búsqueda');
          }

          const data = await response.json();
          
          if (data.patient) {
            autocompleteForm(data.patient);
            showMessage(`Paciente encontrado: ${data.patient.last_name}, ${data.patient.first_name}`, 'success');
          } else {
            showMessage('No se encontró paciente con ese DNI', 'info');
          }
        } catch (error) {
          console.error('Error:', error);
          showMessage(error.message || 'Error al buscar paciente', 'danger');
        }
      });

      // Mostrar/ocultar campo de búsqueda
      searchPatientBtn.addEventListener('click', function() {
        patientSearchContainer.classList.toggle('d-none');
      });

      // Validación en tiempo real
      admissionForm.querySelectorAll('[required]').forEach(field => {
        field.addEventListener('input', function() {
          if (this.value.trim()) {
            this.classList.remove('is-invalid');
          }
        });
      });
    });